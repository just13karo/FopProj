import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class FopProject {
    private final Map<String, Double> num = new HashMap<>(); // to store numbers
    private final Map<String, String> string = new HashMap<>(); // to store strings
    private final Map<String, Boolean> bool = new HashMap<>(); // to store booleans

    public void eval(String program) {
        String[] n = program.split("\n"); // Split the code
        for (int i = 0; i < n.length; i++) { // Trim every line
            String line = n[i].trim();
            if (line.isEmpty()) continue;
            switch (determineCase(line)) {
                case "assign":
                    Assign(line);
                    break;
                case "print":
                    Print(line);
                    break;
                case "if":
                    i = If(n, i);
                    break;
                case "loop":
                    i = Loop(n, i);
                    break;
                default:
                    System.out.println("Unknown command: " + line);
                    break;
            }
        }
    }
private static String determineCase(String line) {
        if (line.contains("=") && (!line.contains("!") && !line.contains("==") && !line.contains("<") && !line.contains(">"))) {
            return "assign"; // To do Assign
        } else if (line.startsWith("print")) {
            return "print"; // To do Print
        } else if (line.contains("if")) {
            return "if"; // To do If
        } else if (line.contains("while")) {
            return "loop"; // To do Loop
        }
        return "unknown";
    }


 private double checker(String expression) {
        expression = expression.trim(); //deletes white spaces(trims)
        if (expression.contains("=")) {
            String[] parts = expression.split("=");
            if (parts.length != 2) {
                throw new IllegalArgumentException("ERROR 404: " + expression);
            }
            String variable = parts[0].trim(); //we get variable name because its on the left
            double value = Expression(parts[1].trim());
            num.put(variable, value); //puts variables' value in num map
            return value;
        }
        if (num.containsKey(expression)) { //check
            return num.get(expression);
        }
        try { //mate
            return Double.parseDouble(expression);
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("ERROR 404 " + expression);
        }
    }

    private double Expression(String expression) {
        if (expression.contains("==") || expression.contains("!=") ||
            expression.contains("<") || expression.contains(">") ||
            expression.contains("<=") || expression.contains(">=")) { //checks for comparison
            return Comparison(expression) ? 1 : 0;  // return boolean
        }
        String[] operations = expression.split("[+\\-*/%]"); //operations
        double result = checker(operations[0]);
        for (int i = 1; i < operations.length; i++) {
            char operator = expression.charAt(expression.indexOf(operations[i - 1]) + operations[i - 1].length());
            double operation2 = checker(operations[i]);
            switch (operator) {
                case '+': result += operation2; break;
                case '-': result -= operation2; break;
                case '*': result *= operation2; break;
                case '/':
                    if (operation2 == 0) throw new ArithmeticException("Did u learn math?");
                    if ((result % 1 == 0) && (operation2 % 1 == 0)) { //Checks if both are integer to return integer
                        result = (int) result / (int) operation2;
                    } else {
                        result /= operation2;
                    }
                    break;
                case '%': result %= operation2; break;
                default:
                    throw new IllegalArgumentException("ERROR 404: " + operator);
            }
        }
        return result; // returns value
    }
private int Loop(String[] n, int i) { //we get lines and start_Index
        String Line = n[i].substring(5).trim();
        String cond = Line.substring(0, Line.indexOf(":")).trim();
        int loopStart = i + 1; //start_Index of the loop
        int loopEnd = loopStart; //end_Index of the loop
        while (loopEnd < n.length && (n[loopEnd].startsWith("    ") || n[loopEnd].isEmpty())) {
            loopEnd++;
        }
        while (Bool(cond)) {
            String Body = String.join("\n", Arrays.copyOfRange(n, loopStart, loopEnd));
            eval(Body);
        }
        return loopEnd - 1;
    }
    private boolean Bool(String expr) {
        expr = expr.trim();  // deletes whitespace
        boolean result = true;
        if (bool.containsKey(expr)) { //checks if its already boolean
            return bool.get(expr);
        }
        if (expr.contains("&") || expr.contains("|")) { //handles operations
            String[] parts = expr.split("[&|]");
            result = Bool(parts[0].trim());  // result
            for (int i = 1; i < parts.length; i++) {
                parts[i] = parts[i].trim();
                String operator = String.valueOf(expr.charAt(expr.indexOf(parts[i - 1]) + parts[i - 1].length())).trim();
                boolean isNegated = parts[i].charAt(0) == '!'; //checks if it contains '!' before operator
                boolean currentValue = isNegated ? !Bool(parts[i].substring(1).trim()) : Bool(parts[i]);
                result = switch (operator) { //applies operators
                    case "&" -> result && currentValue;  // AND operator
                    case "|" -> result || currentValue;  // OR operator
                    default -> result;                   // previous result
                };
            }
            return result;
        }
        return Comparison(expr);
    }
private boolean Comparison(String expr) {
        String[] Parts = expr.split("==|!=|<|>|<=|>="); //this code is meant to evaluate comparisons
        if (Parts.length != 2) {
            throw new IllegalArgumentException("ERROR 404: " + expr);
        }
        Parts[0] = Parts[0].trim();
        Parts[1] = Parts[1].trim();
        String operator = extractOperator(expr); //we use helper function
        
        double leftValue = Expression(Parts[0]);
        double rightValue = Expression(Parts[1]);
        
        switch (operator) {
            case "==": return leftValue == rightValue;
            case "!=": return leftValue != rightValue;
            case ">": return leftValue > rightValue;
            case "<": return leftValue < rightValue;
            case "<=": return leftValue <= rightValue;
            case ">=": return leftValue >= rightValue;
            default:
                throw new IllegalArgumentException("ERROR: " + operator);
        }
    }
    private String extractOperator(String expr) {
        if (expr.contains("=="))
            return "==";
        if (expr.contains("!="))
            return "!=";
        if (expr.contains("<="))
            return "<=";
        if (expr.contains(">="))
            return ">=";
        if (expr.contains("<"))
            return "<";
        if (expr.contains(">"))
            return ">";
        
        return "";
    }

   private int If(String[] lines, int currentIndex) {
        String conditionLine = lines[currentIndex].trim();
        String condition = conditionLine.substring(2).trim();
        condition = condition.substring(0, condition.indexOf(":")).trim(); //we remove "if" and we do trip operation

        boolean conditionResult = Bool(condition);
        int nextIndex = currentIndex + 1;
        
        while (nextIndex < lines.length && lines[nextIndex].startsWith("    ")) { //search from "if" till the "else"
            if (lines[nextIndex].contains("else")) break; 
            nextIndex++;
        }
        if (conditionResult) {                                      
            eval(String.join("\n", Arrays.copyOfRange(lines, currentIndex + 1, nextIndex)));
        }
        if (nextIndex < lines.length && lines[nextIndex].trim().startsWith("else")) { //do same as we did for "if", but in this case we are doing for "else"
            int elseStartIndex = nextIndex + 1;
            while (elseStartIndex < lines.length && lines[elseStartIndex].startsWith("    ")) {
                elseStartIndex++;
            }
            
            if (!conditionResult) {         // while, If the "if" condition was false, evaluate the "else" block
                eval(String.join("\n", Arrays.copyOfRange(lines, nextIndex + 1, elseStartIndex)));
            }
            nextIndex = elseStartIndex;
            // Update the nextIndex to the end of the "else" block
        }
        
        return nextIndex - 1; // Return the updated index after processing the "if" and "else" blocks
    }

private void Assign(String line) {
        String[] parts = line.split("=");
        if (parts.length != 2) {
            throw new IllegalArgumentException("ERROR 404: " + line);
        }
        String variableName = parts[0].trim();
        String valueExpression = parts[1].trim();
        
        if (valueExpression.matches("^-?\\d+(\\.\\d+)?$")) { //if it matches, we store in the number map
            double value = Double.parseDouble(valueExpression);
            num.put(variableName, value);
        }
        else if (valueExpression.startsWith("\"") && valueExpression.endsWith("\"")) { //if it matches, we  store in the map of strings 
            String value = valueExpression.substring(1, valueExpression.length() - 1);
            string.put(variableName, value);
        }
        else if (valueExpression.equals("true") || valueExpression.equals("false")) { //if it matches, we store in the map of booleans
            boolean value = Boolean.parseBoolean(valueExpression);
            bool.put(variableName, value); 
        }
        else {
            double value = Expression(valueExpression);  //evaluate and store in the number map
            num.put(variableName, value);
        }
    }
private void Print(String line) {
        String varName = extractVariableName(line);
        if (isStringLiteral(varName)) { //is ckecking if it is a string literal
            printStringLiteral(varName);
            return;
        }
        if (string.containsKey(varName)) { //checks if it is a string variable
            printStringVariable(varName);
            return;
        }
        if (isBooleanExpression(varName)) { //checks if it is boolean expressions or variables
            printBooleanExpression(varName);
            return;
        }
        if (isConcatenatedStringExpression(varName)) {  //checks if it is concatenated string expressions
            printConcatenatedString(varName);
            return;
        }
        printNumericExpression(varName); //for numeric expression
    }

    //those are helper methods
    private String extractVariableName(String line) {
        return line.substring(line.indexOf('(') + 1, line.indexOf(')')).trim();
    }
    private boolean isStringLiteral(String varName) { //helper of check if a string is a string literal
        return (varName.startsWith("'") && varName.endsWith("'")) ||
                (varName.startsWith("\"") && varName.endsWith("\""));
    }
    private void printStringLiteral(String varName) { //helper to print string literals
        System.out.println(varName.substring(1, varName.length() - 1));
    }
    private boolean isStringVariable(String varName) {    //helper to check if it is a string
        return string.containsKey(varName);
    }

    private void printStringVariable(String varName) {     //helper to print strings

        System.out.println(string.get(varName));
    }

    // helpers to check if the expression contains boolean logic, if it does then it evaluates and prints result
    private boolean isBooleanExpression(String varName) {
        return bool.containsKey(varName) || varName.contains("&") || varName.contains("|") ||
                varName.contains("<") || varName.contains(">") || varName.contains("==") || varName.contains("!=");
    }
    private void printBooleanExpression(String varName) {
        System.out.println(Bool(varName));
    }

    //helpers that check if it is a concatenated string, if it is then it evaluates and prints it.
    private boolean isConcatenatedStringExpression(String varName) {
        return (varName.contains("+") || varName.contains(",")) && StringVar(varName);
    }
    private void printConcatenatedString(String varName) {
        System.out.println(evalString(varName));
    }
    private void printNumericExpression(String varName) { //prints double when needed
        double value = Expression(varName);
        if (value == (long) value) {
            System.out.println((long) value); // Print as long 
        } else {
            System.out.println(value); // Print as double
        }
    }
    private boolean StringVar(String expression) {
        return Arrays.stream(expression.split("[+\\-,]"))
                .map(String::trim)
                .anyMatch(string::containsKey);
    }
    private String evalString(String expression) {   //evaluates concatenated strings
        String[] operands = expression.split("[+\\-,]");
        StringBuilder result = new StringBuilder();
        for (String operand : operands) {
            if (string.containsKey(operand.trim())) {
                result.append(string.get(operand.trim()));
            }
        }
        return result.toString(); 
    }
}

