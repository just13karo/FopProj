import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class FopProject {
    private final Map<String, Double> num = new HashMap<>(); // to store numbers
    private final Map<String, String> string = new HashMap<>(); // to store strings
    private final Map<String, Boolean> bool = new HashMap<>(); // to store booleans

    public void eval(String program) {
        String[] n = program.split("\n"); // Split the code
        for (int i = 0; i < n.length; i++) { // Trim every line
            String line = n[i].trim();
            if (line.isEmpty()) continue;
            switch (determineCase(line)) {
                case "assign":
                    Assign(line);
                    break;
                case "print":
                    Print(line);
                    break;
                case "if":
                    i = If(n, i);
                    break;
                case "loop":
                    i = Loop(n, i);
                    break;
                default:
                    System.out.println("Unknown command: " + line);
                    break;
            }
        }
    }
private static String determineCase(String line) {
        if (line.contains("=") && (!line.contains("!") && !line.contains("==") && !line.contains("<") && !line.contains(">"))) {
            return "assign"; // To do Assign
        } else if (line.startsWith("print")) {
            return "print"; // To do Print
        } else if (line.contains("if")) {
            return "if"; // To do If
        } else if (line.contains("while")) {
            return "loop"; // To do Loop
        }
        return "unknown";
    }


 private double Expression(String expression) {
        if (expression.contains("==") || expression.contains("!=") ||
                expression.contains("<") || expression.contains(">") ||
                expression.contains("<=") || expression.contains(">=")) { //checks for comparison
            return evaluateComparison(expression) ? 1 : 0;  // return boolean
        }
        String[] operations = expression.split("[+\\-*/%]"); //operations
        double result = checker(operations[0]);
        for (int i = 1; i < operations.length; i++) {
            char operator = expression.charAt(expression.indexOf(operations[i - 1]) + operations[i - 1].length());
            double operation2 = checker(operations[i]);
            switch (operator) {
                case '+': result += operation2; break;
                case '-': result -= operation2; break;
                case '*': result *= operation2; break;
                case '/':
                    if (operation2 == 0) throw new ArithmeticException("Did u learn math?");
                    result /= operation2;
                    break;
                case '%': result %= operation2; break;
                default:
                    throw new IllegalArgumentException("ERROR 404: " + operator);
            }
        }
        return result; // returns value
    }
    private double checker(String expression) {
        expression = expression.trim(); //deletes white spaces(trims)
        if (expression.contains("=")) {
            String[] parts = expression.split("=");
            if (parts.length != 2) {
                throw new IllegalArgumentException("ERROR 404: " + expression);
            }
            String variable = parts[0].trim(); //we get variable name because its on the left
            double value = Expression(parts[1].trim());
            num.put(variable, value); //puts variables' value in num map
            return value;
        }
        if (num.containsKey(expression)) { //check
            return num.get(expression);
        }
        try { //mate
            return Double.parseDouble(expression);
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("ERROR 404 " + expression);
        }
    }
private int Loop(String[] n, int i) { //we get lines and start_Index
        String Line = n[i].substring(5).trim();
        String cond = Line.substring(0, Line.indexOf(":")).trim();
        int loopStart = i + 1; //start_Index of the loop
        int loopEnd = loopStart; //end_Index of the loop
        while (loopEnd < n.length && (n[loopEnd].startsWith("    ") || n[loopEnd].isEmpty())) {
            loopEnd++;
        }
        while (Bool(cond)) {
            String Body = String.join("\n", Arrays.copyOfRange(n, loopStart, loopEnd));
            eval(Body);
        }
        return loopEnd - 1;
    }
    private boolean Bool(String expr) {
        expr = expr.trim();  // deletes whitespace
        boolean result = true;
        if (bool.containsKey(expr)) { //checks if its already boolean
            return bool.get(expr);
        }
        if (expr.contains("&") || expr.contains("|")) { //handles operations
            String[] parts = expr.split("[&|]");
            result = Bool(parts[0].trim());  // result
            for (int i = 1; i < parts.length; i++) {
                parts[i] = parts[i].trim();
                String operator = String.valueOf(expr.charAt(expr.indexOf(parts[i - 1]) + parts[i - 1].length())).trim();
                boolean isNegated = parts[i].charAt(0) == '!'; //checks if it contains '!' before operator
                boolean currentValue = isNegated ? !Bool(parts[i].substring(1).trim()) : Bool(parts[i]);
                result = switch (operator) { //applies operators
                    case "&" -> result && currentValue;  // AND operator
                    case "|" -> result || currentValue;  // OR operator
                    default -> result;                   // previous result
                };
            }
            return result;
        }
        return Comparison(expr);
    }

